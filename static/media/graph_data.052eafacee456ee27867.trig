@prefix dc: <http://purl.org/dc/elements/1.1/> .
@prefix dcterms: <http://purl.org/dc/terms/> .
@prefix dcam: <http://purl.org/dc/dcam/> .
@prefix ex: <http://example.com#> .
@prefix gvo: <http://vocab.getty.edu/ontology#> .
@prefix pres: <https://svirgilgood.github.io/constraining-linked-open-data/> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix sh: <http://www.w3.org/ns/shacl#> .
@prefix tgn: <http://vocab.getty.edu/tgn/> .
@prefix ucns: <http://lib.uchicago.edu/shapes/> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix dcmitype: <http://purl.org/dc/dcmitype/> .

ucns:_ArkDctermsIdentifierExample  {

  ucns:_RegExExampleShape
    a sh:NodeShape ;
    sh:property ucns:_ArkDctermsIdentifierProperty ;
    sh:targetClass ex:RegexExample ;
    .


  ucns:_ArkDctermsIdentifierProperty
    sh:datatype xsd:string ;
    sh:maxCount "1"^^xsd:integer ;
    sh:message "All resources with an ARK identifier need to have a match need to have an identifier." ;
    sh:minCount "1"^^xsd:integer ;
    sh:name "Identifier" ;
    sh:path dcterms:identifier ;
    sh:pattern "^https:\\/\\/n2t\\.net\\/ark:61001\\/[0-9a-zA-Z]{12}(\\/file(\\.(wav|tif)))?$" ;
    .
}

ucns:_ArkDctermsIdentifierData  {
  ex:_ExampleOne
    a ex:RegexExample ;
    dcterms:identifier "https://n2t.net/ark:61001/b2nt2gw9rr65" ;
    .

  ex:_ExampleTwo
    a ex:RegexExample ;
    dcterms:identifier "https://bad-uri.net/ark:61001/b2nt2gw9rr65/file.wav" ;
    .
}


ucns:_DcTypeExample {
  ucns:_DcTypeExampleShape 
    a sh:NodeShape ;
    sh:property ucns:_DcTypeProperty ;
    sh:targetClass ex:DcTypeExample ;
    .

  ucns:_DcTypeProperty
    sh:node [
      rdf:type sh:NodeShape ;
      sh:property [
        sh:path dcam:memberOf ;
        sh:hasValue dcterms:DCMIType ;
      ] ;
    ] ;
    sh:message "All term types should belong to the DCM class" ;
    sh:minCount "1"^^xsd:integer ;
    sh:name "Type" ;
    sh:path dc:type ;
    .
}

ucns:_DcTypeExampleData {

  ex:_DcTypeExampleOne 
    a ex:DcTypeExample ;
    dc:type dcmitype:Sound ;
    .

  ex:_DcTypeExampleTwo 
    a ex:DcTypeExample ;
    dc:type "Sound" ;
    .

  dcmitype:Sound 
    a rdfs:Class ;
    rdfs:label "Sound"@en ;
    dcam:memberOf dcterms:DCMIType ;
    .
}



ucns:_DctermsSpatialExample {

  ucns:_DctermsSpatialExampleShape
    a sh:NodeShape ;
    sh:property ucns:_DctermsSpatialProperty ;
    sh:targetClass ex:SpatialExample ;
    .

  ucns:_DctermsSpatialProperty
    sh:message "The spatial property should have TGN identifier." ;
    sh:minCount "1"^^xsd:integer ;
    sh:name "Spatial" ;
    sh:or (
      [
        sh:class gvo:PhysAdminPlaceConcept ;
      ]
      [
        sh:class gvo:PhysPlaceConcept ;
      ]
      [
        sh:class gvo:AdminPlaceConcept ;
      ]
      [
        sh:hasValue "(:unav)" ;
      ]
      [
        sh:hasValue "(:unkn)" ;
      ]
    ) ;
    sh:path dcterms:spatial ;
    .

}

ucns:_DctermsSpatialData {
  ex:_SpatialExampleFive
    a ex:SpatialExample ;
    dcterms:spatial "(:unkn)" ;
    .

  ex:_SpatialExampleFour
    a ex:SpatialExample ;
    dcterms:spatial "(:unav)" ;
    .

  ex:_SpatialExampleOne
    a ex:SpatialExample ;
    dcterms:spatial tgn:7544578 ;
    .

  ex:_SpatialExampleThree
    a ex:SpatialExample ;
    dcterms:spatial tgn:2008578 ;
    .

  ex:_SpatialExampleTwo
    a ex:SpatialExample ;
    dcterms:spatial tgn:2561094 ;
    .


  tgn:2008578
    a gvo:AdminPlaceConcept ;
    rdfs:label "Ivy" ;
    .

  tgn:2561094
    a gvo:PhysPlaceConcept ;
    rdfs:label "Orrs Pond" ;
    .

  tgn:7544578
    a gvo:PhysAdminPlaceConcept ;
    rdfs:label "Gudiyam Cave" ;
    .
}

ucns:_DctermsCreatedShapes {

  ucns:_DctermsCreatedShape 
    a sh:NodeShape ;
    sh:property ucns:_CreatedProperty ;
    sh:targetClass ex:CreatedExample ;
    .

  ucns:_CreatedProperty
    sh:datatype xsd:dateTime ;
    sh:maxCount "1"^^xsd:integer ;
    sh:message "There should be only one created property with an xsd:dateTime datatype" ;
    sh:minCount "1"^^xsd:integer ;
    sh:name "Created" ;
    sh:path dcterms:created ;
    sh:sparql [
      a sh:SPARQLConstraint ;
      sh:message "At least one of the dcterms:modified values should equal the dcterms:created value." ;
      sh:prefixes <http://lib.uchicago.edu/shapes/> ;
      sh:select """
        SELECT $this $PATH ?dcCreated
        WHERE {
            $this
              $PATH ?dcCreated ;
          .
          FILTER NOT EXISTS {
            ?this dcterms:modified ?dcCreated .
          }
        }
      """ ;
    ] ;
    .
}

ucns:_DctermsCreatedData {
  ex:_DctermsCreatedExOne 
    a ex:CreatedExample ;
    dcterms:modified "2024-10-12"^^xsd:date , "2024-10-11"^^xsd:date , "2024-10-10"^^xsd:date;
    dcterms:created "2024-10-10"^^xsd:date ;
    .
  ex:_DctermsCreatedExTwo
    a ex:CreatedExample ;
    dcterms:modified "2024-11-11"^^xsd:date , "2024-11-10"^^xsd:date , "2024-11-09"^^xsd:date;
    dcterms:created "2024-10-10"^^xsd:date ;
    .
}

pres:_MachingDifferentPossibleClasses
  a pres:ShaclSlide ;
  rdfs:label "Matching One of Many Classes" ;
  pres:notes """We are targeting a new class. 
  <p>Notice, we have a minCount, but no maxCount. More than one place can be targeted</p> 
  <p>The predicate we are targeting is different dcterms:spatial</p>
  <p>TGN spatial instances can be one of three classes: PhysAdminPlaceConcept, PhysPlaceConcept, AdminPlaceConcept</p> 
  <p>But, in our dataset, these can also be unavailable or unknown.</p>
  <p>The sh:or predicate can be used to show the different values that are acceptable. When it comes to the specific value though 
  it changes patterns.</p>
  <p>We can make the validation fail, if we change the spelling of one of the "unav"</p>
  """ ; 
  pres:containsData ucns:_DctermsSpatialData ;
  pres:containsShape ucns:_DctermsSpatialExample ;
  pres:order "2"^^xsd:integer ;
  .

pres:_ShaclValidationArkIdentifiers
  a pres:ShaclSlide ;
  rdfs:label "Regular expression validation" ;
  pres:notes """The following SHACL examples will be striped to bare bones examples. 
  <p>A SHACL shape consists of a couple of couple of key indicators: a target class and a property.</p>
<p> The targetClass is what targets the specific instances to validate.</p> 
<p> The properties are the constraints on the specific predicates that will appear.</p>
<p> For this instance we have a maxCount and a minCount. There has to be at least one of these predicates on the instance.</p>
<p> The specific predicate that is specified is the sh:path type.</p>
<p> The pattern that we are looking for can be a string that conforms to a specific regular expression.</p>
  <p>We are also providing names and messages for our property that allows us to more information in the error message.</p>
  Look at the specific instances.""" ;
  pres:containsData ucns:_ArkDctermsIdentifierData ;
  pres:containsShape ucns:_ArkDctermsIdentifierExample ;
  pres:order "1"^^xsd:integer ;
  .

pres:_ConstraingDcTypes 
  a pres:ShaclSlide ;
  rdfs:label "Constraining DCMI types" ;
  pres:notes """DCMITypes are all members of rdfs:Class, which do not allow for targeting constraints the same way was for TGN. 
  <p>To target the DCMIType, one can use an sh:node to nest a shape in another shape</p>
  <p>This allows for the targeting of how DCMI creates their classes</p>
  """ ;
  pres:containsData ucns:_DcTypeExampleData ;
  pres:containsShape ucns:_DcTypeExample ;
  pres:order "3"^^xsd:integer ;
  .

pres:_UsingSparqlRules 
  a pres:SparqlSlide ;
  rdfs:label "Agreement of one among many" ;
  pres:order "4" ;
  pres:notes """SHACL allows for SPARQL Constraints For when the data gets more complex. 
  <p>A SPARQL constraint is its own Node</p> 
  <p>Prefixes can be defined (they are defined elsewhere in the graph)</p> 
  <p>$this refers to the instance, and $PATH refers to the object of sh:path.</p>
  <p>The way the query works is that if it returns no values, than it passes (that is why the FILTER NOT EXISTS clause is the way it is)</p> 
  <p>Unfortunately, the javascript-shacl validator doesn't have access to SPARQL constraints</p> 
  <p>Fix the query to show how once an item matches then we have no results</p>
  <p>There are also other SHACL rules that could be used for other things, but many of them require advanced SHACL</p>
  """ ;
  pres:containsData ucns:_DctermsCreatedData ;
  pres:containsShape ucns:_DctermsCreatedShapes;
  pres:hasScript """PREFIX dc: <http://purl.org/dc/elements/1.1/> 
PREFIX dcterms: <http://purl.org/dc/terms/> 
PREFIX ucns: <http://lib.uchicago.edu/shapes/> 

SELECT ?s ("dcterms:created" AS ?path) ?dcCreated 
WHERE { 
  GRAPH ucns:_DctermsCreatedData {
    ?s 
      dcterms:created ?dcCreated ;
    .
    FILTER NOT EXISTS {
      ?s dcterms:modified ?dcCreated .
    }
  }
}
  """^^<https://www.iana.org/assignments/media-types/application/sparql-query> ;
  .

